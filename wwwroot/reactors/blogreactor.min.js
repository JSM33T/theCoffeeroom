const routerViewElement = document.querySelector("router-view"),CategorisedBlogComponent = {props: ["param1","param2"],watch: {$route(s,e){s.params.param1 === e.params.param1 && s.params.param2 === e.params.param2 || (routerViewElement.innerHTML = this.blogs = [],this.$nextTick((()=> {this.isLoading = !0,this.titleItem = "Blogs '" + this.param2 + "'",this.loadDefault(),window.scrollTo({top: 0,behavior: "smooth"})})))}},mounted(){this.loadDefault("",""),window.scrollTo({top: 0,behavior: "smooth"})},methods: {async loadDefault(){try {const s = (await axios.get("/api/blogs/0/" + this.param1 + "/" + this.param2)).data; this.blogs = s} catch (s){console.error("Error fetching data from API:",s)} finally {setTimeout((()=> {this.isLoading = !1}),200)}}},data(){return {blogs: [],isLoading: !0,titleItem: "Blogs '" + this.param2 + "'"}},template: '  <h1 class="pb-3 pb-lg-4" id="titleBlog">{{titleItem}}</h1>  <div v-if="isLoading">  <article class="row g-0 border-0 mb-4">  <a class="col-sm-5 rounded-5 placeholder placeholder-wave" style="min-height:14rem"></a>  <div class="col-sm-7">  <div class="pt-4 pb-sm-4 ps-sm-4 pe-lg-4">  <p class="card-text placeholder-glow">  <span class="placeholder placeholder-sm col-7 me-2"></span>  <span class="placeholder placeholder-sm col-4"></span>  <span class="placeholder placeholder-sm col-4 me-2"></span>  <span class="placeholder placeholder-sm col-6"></span>  <span class="placeholder placeholder-sm col-8"></span>  </p>  </div>  </div>  </article>  </div>  <div v-else>  <div v-for="blog in blogs" :key="blog.title">  <article class="row g-0 border-0 mb-4 fade-in-smooth-pop">  <a class="col-sm-5 bg-repeat-0 bg-size-cover bg-position-center rounded-5" v-bind:href="\'/blog/\' + blog.datePosted.substring(0,4)+ \'/\' + blog.urlHandle " v-bind:style="{\'background-image\': \'url(/content/blogcontent/\' + blog.datePosted.substring(0,4)+ \'/\' + blog.urlHandle + \'/cover.jpg)\',\'min-height\': \'14rem\'}"></a>  <div class="col-sm-7">  <div class="pt-4 pb-sm-4 ps-sm-4 pe-lg-4">  <h3>  <a v-bind:href="\'/blog/\' + blog.datePosted.substring(0,4)+\'/\' + blog.urlHandle">  {{blog.title}}  </h3>  <p class="d-sm-none d-md-block">{{blog.description}}</p><div class="d-flex flex-wrap align-items-center mt-n2"><a class="nav-link text-muted fs-sm fw-normal d-flex align-items-end p-0 mt-2" href="#">{{blog.comments}}<i class="ai-message fs-lg ms-1"></i></a><span class="fs-xs opacity-20 mt-2 mx-3">|</span><span class="fs-sm text-muted mt-2">{{blog.datePosted.substring(0,7)}}</span><span class="fs-xs opacity-20 mt-2 mx-3">|</span><router-link class="badge text-nav fs-xs border mt-2" :to="\'/blogs/category/\'+ blog.locator ">{{blog.category}}</router-link></div>  </div>  </div>  </article>  </div>  </div>   '},HomeComponent = {template: '  <h1 class="pb-3 pb-lg-4" id="titleBlog">{{titleItem}}</h1>  <div v-if="isLoading">  <article class="row g-0 border-0 mb-4">  <a class="col-sm-5 rounded-5 placeholder placeholder-wave" style="min-height:14rem"></a>  <div class="col-sm-7">  <div class="pt-4 pb-sm-4 ps-sm-4 pe-lg-4">  <p class="card-text placeholder-glow"><span class="placeholder placeholder-sm col-7 me-2"></span><span class="placeholder placeholder-sm col-4"></span><span class="placeholder placeholder-sm col-4 me-2"></span><span class="placeholder placeholder-sm col-6"></span><span class="placeholder placeholder-sm col-8"></span></p>  </div>  </div>  </article>  </div>  <div v-else>  <div v-if="blogs.length > 0">  <div v-for="blog in blogs" :key="blog.title">  <article class="row g-0 border-0 mb-4 fade-in-smooth-pop">  <a class="col-sm-5 bg-repeat-0 bg-size-cover bg-position-center rounded-5" v-bind:href="\'/blog/\' + blog.datePosted.substring(0,4)+ \'/\' + blog.urlHandle " v-bind:style="{\'background-image\': \'url(/content/blogcontent/\' + blog.datePosted.substring(0,4)+ \'/\' + blog.urlHandle + \'/cover.jpg)\',\'min-height\': \'14rem\'}"></a>  <div class="col-sm-7">  <div class="pt-4 pb-sm-4 ps-sm-4 pe-lg-4">  <h3>  <a v-bind:href="\'/blog/\' + blog.datePosted.substring(0,4)+\'/\' + blog.urlHandle">  {{blog.title}}  </h3>  <p class="d-sm-none d-md-block">{{blog.description}}</p><div class="d-flex flex-wrap align-items-center mt-n2"><a class="nav-link text-muted fs-sm fw-normal d-flex align-items-end p-0 mt-2" href="#">{{blog.comments}}<i class="ai-message fs-lg ms-1"></i></a><span class="fs-xs opacity-20 mt-2 mx-3">|</span><span class="fs-sm text-muted mt-2">{{blog.datePosted.substring(0,7)}}</span><span class="fs-xs opacity-20 mt-2 mx-3">|</span><router-link class="badge text-nav fs-xs border mt-2" :to="\'/blogs/category/\'+ blog.locator ">{{blog.category}}</router-link></div>  </div>  </div>  </article>  </div>  </div>  <div v-else>  <h1 class="fade-in-smooth-pop">no blogs found!!</h1>  </div>    </div>   ',data: ()=> ({blogs: [],isLoading: !0,titleItem: "Blogs"}),async mounted(){window.scrollTo({top: 0,behavior: "smooth"}); try {const s = (await axios.get("/api/blogs/0/na/na")).data; this.blogs = s,console.log(s)} catch (s){console.error("Error fetching data from API:",s)} finally {this.isLoading = !1}},watch: {"$route.query.search": {handler(s,e){this.$nextTick((async ()=> {"string" == typeof s && s.length >= 1 ? (this.loadSearches(s),this.titleItem = "Blogs '" + s + "'"): (this.loadDefaults(),this.titleItem = "Blogs")}))},immediate: !0}},methods: {async loadDefaults(){try {const s = (await axios.get("/api/blogs/0/na/na")).data; this.blogs = s,console.log("default triggered")} catch (s){console.error("Error fetching data from API:",s)} finally {this.isLoading = !1}},async loadSearches(s){try {this.titleItem = "Searching"; const e = (await axios.get("/api/blogs/0/search/" + s)).data; this.blogs = e} catch (s){console.error("Error fetching data from API:",s)} finally {this.isLoading = !1}}}},routes = [{path: "/blogs",component: HomeComponent},{path: "/blogs/:param1/:param2",component: CategorisedBlogComponent,props: !0}],router = VueRouter.createRouter({history: VueRouter.createWebHistory(),routes: routes}),app = Vue.createApp({data: ()=> ({isLoading: !0,titleItem: "Blogs"}),methods: {async navigateToBlog(){this.$nextTick((()=> {this.inputValue.length >= 1 ? (this.$router.push({path: "/blogs",query: {search: this.inputValue}}),this.titleItem = "searching"): this.$router.push({path: "/blogs"})}))}}}); app.use(router),app.mount("#app");