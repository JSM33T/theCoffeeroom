@{
    Layout = "_LayoutEmpty";

    ViewData["Title"] = "The Coffee Room Account";
    ViewData["Tags"] = "coffeeroom, blogs, space, shop, apps, social,music,software development, gallery, photography,magazines, creative";
    ViewData["Description"] ??= "Login or Create your account in The Coffeeroom";
    ViewData["Authors"] ??= "Jass";
    ViewData["OgUrl"] ??= "https://thecoffeeroom.in/account";
    ViewData["OgType"] ??= "website";
    ViewData["OgImage"] ??= "/assets/images/covers/ogimage.png";


    ViewData["ActiveCategory"] = "";
    ViewData["ActiveYear"] = "";
    ViewData["ActiveTag"] = "";
    ViewData["ActivePage"] = "Account";
    ViewData["ShowNav"] = "n";
    ViewData["ShowFooter"] = "n";

}

@section cssStyles{
    <style>
        [v-cloak] {
            display: none;
        }

        .homebtn
        {
            z-index:4000;
        }
    </style>
}
@Html.AntiForgeryToken()
<div 
    class="d-lg-flex position-relative h-100" 
    id="app"
>
    
    <router-view></router-view>
    
    <div 
        class="w-50 bg-size-cover bg-repeat-0 bg-position-center" 
        style="background-image: url(/assets/images/covers/login.jpg);"
    ></div>
</div>

@section jsScripts
{
   <script>
        const routerViewElement = document.querySelector('router-view');

        const BaseComponent = {
            template:
                `
           @await Html.PartialAsync("Components/_base")
            `,
            data() {
                return {
                };
            },
            async mounted() {
                this.$initToggle();
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth',
                });
            },
            methods: {


            }
        };

        const LoginComponent = {
            template: `
             @await Html.PartialAsync("Components/_login")
                            `,
            data() {
                return {
                    buttonText: 'Log In',
                    username: '',
                    password: '',
                };
            },
            async mounted() {
                this.$initToggle();
                this.username = '';
                this.password = '';
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth',
                });
            },
            methods: {
                submitLogin() {
                    this.buttonText = '<span class="spinner-grow spinner-grow-sm me-2" role="status" aria-hidden="true"></span>Logging In...';
                    const details = {
                        UserName: this.username,
                        PassWord: this.password,
                    };
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    axios.defaults.headers.common['RequestVerificationToken'] = token;
                    axios.post('/api/account/login', details)
                        .then((response) => {
                            //toaster("success", "Logging in..");
                            let prevlink = localStorage.getItem("prev_link");
                            if (prevlink !== '' && prevlink !== undefined && prevlink !== '/account/login') {
                                window.location.href = prevlink;
                            }
                            else {
                                window.location.href = "/";
                            }

                        })
                        .catch((error) => {
                            toaster("error", error.response.data);
                        })
                        .finally(() => {
                            this.buttonText = 'Log In';
                        });
                },
            }
        };

        const SignupComponent = {
            template: `
                   @await Html.PartialAsync("Components/_signup")
                            `,

            data() {
                return {
                    buttonText: 'Sign Up',
                    username: '',
                    password: '',
                    passconfirm: '',
                    firstname: '',
                    lastname: '',
                    email: '',

                };
            },
            async mounted() {
                this.$initToggle();
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth',
                });
            },
            methods: {
                submitSignup() {
                    if (this.firstname == "") {
                        toaster('error', 'first name is mandatory!!');
                    }
                    else if (this.username == "") {
                        toaster('error', 'username is mandatory!!');
                    }
                    else if (this.password !== this.passconfirm) {
                        toaster('error', 'passwords dont match!!');
                    }
                    else {
                        this.buttonText = '<span class="spinner-grow spinner-grow-sm me-2" role="status" aria-hidden="true"></span>Signing Up...';
                        const details = {
                            FirstName: this.firstname,
                            LastName: this.lastname,
                            UserName: this.username,
                            Password: this.password,
                            EMail: this.email
                        };
                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        axios.defaults.headers.common['RequestVerificationToken'] = token;
                        axios.post('/api/account/signup', details)
                            .then((response) => {
                                console.log(response.data);
                                toaster("success", response.data.message);
                            })
                            .catch((error) => {
                                toaster("error", error.response.data);
                            })
                            .finally(() => {
                                this.buttonText = 'Sign Up';
                                this.lala = 'Sign Up';
                            });
                    }

                },
            },
        };

        const PasswordReset = {
            template: `
                 @await Html.PartialAsync("Components/_recovery")
                  `,
            data() {
                return {
                    buttonText: 'Send Recovery Key',
                    stringRec: '',
                    password: '',
                    showOtpPanel: false,
                    email: '',
                };
            },
            async mounted() {
                this.$initToggle();
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth',
                });
            },
            methods: {
                passReset() {
                    if (this.email == "") {
                        toaster('error', 'please enter your username or email!!');
                    }
                    else {
                        this.buttonText = '<span class="spinner-grow spinner-grow-sm me-2" role="status" aria-hidden="true"></span>Loading...';
                        const details = {
                            StringRec: this.email
                        };

                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        axios.defaults.headers.common['RequestVerificationToken'] = token;
                        axios.post('/api/account/recover', details)
                            .then((response) => {
                                toaster("success", response.data);
                                this.showOtpPanel = true;
                                this.isReadOnly = true;
                                this.$refs.otpBox.focus();
                            })
                            .catch((error) => {
                                toaster("error", error.response.data);
                            })
                            .finally(() => {
                                this.buttonText = 'Send Recovery Key';
                            });
                    }

                },
                loginViaOtp() {

                    const loginDeets = {
                        otp: this.otp,
                        username: this.email

                    };
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    axios.defaults.headers.common['RequestVerificationToken'] = token;
                    axios.post('/api/account/loginviaotp', loginDeets)
                        .then((response) => {
                            toaster("success", response.data);
                            window.location.href = '/profile/security';
                        })
                        .catch((error) => {
                            toaster("error", error.response.data);
                        })
                        .finally(() => {
                            this.buttonText = 'Login';
                        });
                },
            }
        };

        const Loginviaotp = {
            template: `
        @await Html.PartialAsync("Components/_otplogin")
                      
                                    `,
            data() {
                return {
                    buttonText: 'Log In',
                    username: '',
                    password: '',
                };
            },
            async mounted() {
                this.$initToggle();
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth',
                });
            },
            methods: {
                submitLogin() {
                    this.buttonText = '<span class="spinner-grow spinner-grow-sm me-2" role="status" aria-hidden="true"></span>Logging In...';
                    const details = {
                        UserName: this.username,
                        PassWord: this.password,
                    };
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    axios.defaults.headers.common['RequestVerificationToken'] = token;
                    axios.post('/api/account/login', details)
                        .then((response) => {
                            toaster("success", "Logging in..");
                            window.location.href = localStorage.getItem("curr_link");
                        })
                        .catch((error) => {
                            toaster("error", error.response.data);
                        })
                        .finally(() => {
                            this.buttonText = 'Log In';
                        });
                },
            }
        };

        const routes = [
            {
                path: '/account/',
                component: BaseComponent
            }, {
                path: '/account/login',
                component: LoginComponent
            }, {
                path: '/account/signup',
                component: SignupComponent
            }, {
                path: '/account/accountrecovery',
                component: PasswordReset
            }, {
                path: '/account/loginviaotp',
                component: Loginviaotp
            }
        ];
        const router = VueRouter.createRouter({
            history: VueRouter.createWebHistory(),
            routes
        });

        const app = Vue.createApp({
            data() {
                return {
                    isLoading: true,
                };
            },
        });
        app.config.globalProperties.$initToggle = function () {
            var passwordVisibilityToggle = function () {
                var elements = document.querySelectorAll('.password-toggle');
                var _loop2 = function _loop2(i) {
                    var passInput = elements[i].querySelector('.form-control'),
                        passToggle = elements[i].querySelector('.password-toggle-btn');
                    passToggle.addEventListener('click', function (e) {
                        if (e.target.type !== 'checkbox') return;
                        if (e.target.checked) {
                            passInput.type = 'text';
                        } else {
                            passInput.type = 'password';
                        }
                    }, false);
                };
                for (var i = 0; i < elements.length; i++) {
                    _loop2(i);
                }
            }();
        };
        app.use(router);
        app.mount('#app');


   </script>
}

